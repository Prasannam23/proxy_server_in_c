
# Compiler and compilation flags configuration

CC = gcc
CFLAGS = -g -Wall -Wextra -std=c99 -D_GNU_SOURCE
LDFLAGS = -lpthread
TARGET = proxy_server
SOURCES = myservercache.c proxyparse.c
OBJECTS = $(SOURCES:.c=.o)
HEADERS = proxy_parse.h

# Archive configuration for submission
ARCHIVE_NAME = proxy_assignment.tgz
ARCHIVE_FILES = proxy_server_with_cache.c proxy_parse.c proxy_parse.h README Makefile

# Default target - builds the complete proxy server
all: $(TARGET)

# Main executable target - links all object files
$(TARGET): $(OBJECTS)
	@echo "Linking object files to create proxy server executable..."
	$(CC) $(CFLAGS) -o $@ $^ $(LDFLAGS)
	@echo "Build completed successfully: $(TARGET)"

# Object file compilation rules with dependency tracking
proxy_server_with_cache.o: proxy_server_with_cache.c $(HEADERS)
	@echo "Compiling proxy server main module..."
	$(CC) $(CFLAGS) -c $< -o $@

proxy_parse.o: proxy_parse.c $(HEADERS)
	@echo "Compiling HTTP request parser module..."
	$(CC) $(CFLAGS) -c $< -o $@

# Generic rule for compiling C source files to object files
%.o: %.c
	@echo "Compiling $<..."
	$(CC) $(CFLAGS) -c $< -o $@

# Development and testing targets
debug: CFLAGS += -DDEBUG -O0
debug: $(TARGET)
	@echo "Debug build completed with additional debugging symbols"

release: CFLAGS += -O2 -DNDEBUG
release: clean $(TARGET)
	@echo "Release build completed with optimizations"

# Utility targets for project maintenance
clean:
	@echo "Cleaning up build artifacts..."
	rm -f $(TARGET) $(OBJECTS) core *.core
	@echo "Clean completed"

# Create submission archive
tar: clean
	@echo "Creating submission archive: $(ARCHIVE_NAME)"
	tar -czf $(ARCHIVE_NAME) $(ARCHIVE_FILES)
	@echo "Archive created successfully"
	@ls -lh $(ARCHIVE_NAME)

# Install target for system-wide installation (optional)
install: $(TARGET)
	@echo "Installing proxy server to /usr/local/bin/"
	sudo cp $(TARGET) /usr/local/bin/
	sudo chmod 755 /usr/local/bin/$(TARGET)

# Uninstall target
uninstall:
	@echo "Removing proxy server from system..."
	sudo rm -f /usr/local/bin/$(TARGET)

# Development utilities
check-syntax:
	@echo "Performing syntax check on source files..."
	$(CC) $(CFLAGS) -fsyntax-only $(SOURCES)
	@echo "Syntax check completed successfully"

# Show help information
help:
	@echo "Available targets:"
	@echo "  all       - Build the proxy server (default)"
	@echo "  debug     - Build with debug symbols and no optimization"
	@echo "  release   - Build optimized release version"
	@echo "  clean     - Remove all build artifacts"
	@echo "  tar       - Create submission archive"
	@echo "  install   - Install to system (requires sudo)"
	@echo "  uninstall - Remove from system (requires sudo)"
	@echo "  check-syntax - Verify code syntax without building"
	@echo "  help      - Show this help message"

# Run the proxy server with default port (development helper)
run: $(TARGET)
	@echo "Starting proxy server on default port 8080..."
	./$(TARGET) 8080

# Memory leak checking with valgrind (if available)
memcheck: $(TARGET)
	@echo "Running memory leak detection..."
	valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./$(TARGET) 8080

# Performance profiling with gprof (requires -pg flag)
profile: CFLAGS += -pg
profile: LDFLAGS += -pg
profile: $(TARGET)
	@echo "Profiling build completed - run program then use 'gprof $(TARGET) gmon.out'"

# Code formatting with clang-format (if available)
format:
	@echo "Formatting source code..."
	@if command -v clang-format >/dev/null 2>&1; then \
		clang-format -i $(SOURCES) $(HEADERS); \
		echo "Code formatting completed"; \
	else \
		echo "clang-format not found - skipping formatting"; \
	fi

# Static analysis with cppcheck (if available)
analyze:
	@echo "Running static code analysis..."
	@if command -v cppcheck >/dev/null 2>&1; then \
		cppcheck --enable=all --std=c99 $(SOURCES); \
	else \
		echo "cppcheck not found - skipping analysis"; \
	fi

# Declare phony targets (targets that don't create files)
.PHONY: all clean tar install uninstall debug release help run memcheck profile format analyze check-syntax

# Dependency tracking for automatic rebuilds when headers change
-include $(OBJECTS:.o=.d)

%.d: %.c
	@echo "Generating dependencies for $<..."
	@$(CC) -MM $(CFLAGS) $< > $@.tmp
	@sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.tmp > $@
	@rm -f $@.tmp


    // this file is generated by ai so just go through the project and you will understand how to configure this 